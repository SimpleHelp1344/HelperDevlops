import cv2, argparse, subprocess, json, os, datetime as dt, math

def _ffprobe(path, entry):
    out = subprocess.run(
        ["ffprobe", "-v", "quiet", "-print_format", "json", "-show_entries", entry, path],
        capture_output=True, text=True, check=True
    ).stdout
    return json.loads(out)

def creation_epoch(path):
    t = _ffprobe(path, "format_tags=creation_time").get("format", {}).get("tags", {}).get("creation_time")
    if t:
        if t.endswith("Z"):
            t = t[:-1]
        return int(dt.datetime.fromisoformat(t).replace(tzinfo=dt.timezone.utc).timestamp())
    try:
        return int(os.path.getctime(path))
    except OSError:
        return None

def video_fps(path):
    for s in _ffprobe(path, "stream=avg_frame_rate,r_frame_rate").get("streams", []):
        fr = s.get("avg_frame_rate") or s.get("r_frame_rate")
        if fr and fr != "0/0":
            n, d = map(int, fr.split("/"))
            return n / d if d else 0
    return 0

def iso_epoch(s):
    return int(dt.datetime.fromisoformat(s).timestamp())

def play_segment(path, start_iso, end_iso):
    start_ep, end_ep = iso_epoch(start_iso), iso_epoch(end_iso)
    c_ep = creation_epoch(path)
    if c_ep is None:
        return
    fps = video_fps(path)
    cap = cv2.VideoCapture(path)
    if not cap.isOpened() or fps == 0:
        return
    start_f = math.floor((start_ep - c_ep) * fps)
    end_f = math.ceil((end_ep - c_ep) * fps)
    total = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    if start_f < 0 or end_f <= start_f or end_f > total:
        cap.release()
        return
    cap.set(cv2.CAP_PROP_POS_FRAMES, start_f)
    while cap.isOpened():
        if int(cap.get(cv2.CAP_PROP_POS_FRAMES)) >= end_f:
            break
        ret, frame = cap.read()
        if not ret:
            break
        cv2.imshow("segment", frame)
        if cv2.waitKey(int(1000 / fps)) & 0xFF == ord("q"):
            break
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("-start", required=True)
    p.add_argument("-end", required=True)
    p.add_argument("-videoPath", required=True)
    a = p.parse_args()
    play_segment(a.videoPath, a.start, a.end)