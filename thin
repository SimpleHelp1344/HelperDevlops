Below are two practical, battle-tested ways to grab an RTSP stream on Ubuntu with Python while keeping accurate wall-clock time for later, time-based playback searches.

⸻

1. Record with FFmpeg (called from Python) – time kept as real metadata

FFmpeg already carries each frame’s Presentation Time-Stamp (PTS).
All you have to do is:
	1.	Synchronise the source (make sure the camera’s clock is on NTP if you need sub-second accuracy).
	2.	Tell FFmpeg to keep those timestamps and embed a creation-time tag in the container; cut the file into handy chunks whose filenames are the start-time:

sudo apt install ffmpeg      # one-off install

import subprocess, shlex, datetime, pathlib, os

rtsp = "rtsp://user:pass@host:554/stream"
out_dir = pathlib.Path("clips")
out_dir.mkdir(exist_ok=True)

# Build an FFmpeg command:
cmd = (
    "ffmpeg -rtsp_transport tcp -i {rtsp} "
    "-c copy "                   # no re-encoding
    "-use_wallclock_as_timestamps 1 "
    "-map 0 "
    "-f segment -segment_time 600 -strftime 1 "
    "-metadata creation_time=%s "
    '{out_dir}/clip_%%Y-%%m-%%d_%%H-%%M-%%S.mp4'
).format(
    rtsp=shlex.quote(rtsp),
    out_dir=out_dir,
    # creation_time wants RFC 3339.  FFmpeg will apply it to every segment.
    s=datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
)

subprocess.run(cmd, shell=True, check=True)

What this gives you

What	How to use it later
Accurate PTS inside each MP4	Libraries such as PyAV, FFprobe/FFmpeg, or a media player can jump to an exact timestamp.
Segment file name = UTC start-time	A trivial glob/pick logic lands you in the right 10-minute chunk instantly (you can change -segment_time).
creation_time tag inside the container	Even if you rename the file, the tag survives.

(If you ever must overlay the clock on the video itself, just add -vf "drawtext=text='%{pts\\:localtime\\:%s}':x=w-tw-10:y=h-th-10:box=1:boxcolor=0x00000088" right before the output. FFmpeg’s drawtext expands each frame’s timestamp. ￼ ￼)

⸻

2. Capture with OpenCV – overlay the timestamp on every frame

Good when you intend to process frames in Python anyway.

pip install opencv-python-headless numpy

import cv2, datetime, pathlib

rtsp = "rtsp://user:pass@host:554/stream"
cap  = cv2.VideoCapture(rtsp, cv2.CAP_FFMPEG)   # use FFmpeg backend
if not cap.isOpened():
    raise RuntimeError("Cannot open stream")

width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps    = cap.get(cv2.CAP_PROP_FPS) or 25        # fallback if camera lies

fourcc = cv2.VideoWriter_fourcc(*"mp4v")
out    = cv2.VideoWriter("stream_with_time.mp4", fourcc, fps, (width, height))

while True:
    ok, frame = cap.read()
    if not ok:
        break
    ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    cv2.putText(frame, ts, (10, height - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1,
                cv2.LINE_AA)
    out.write(frame)

cap.release()
out.release()

Pros & cons

✅ Pros	❌ Cons
Overlay is human-visible in any player.	Timestamp is burnt in; you can’t cleanly erase it later.
You control frame-by-frame processing in Python.	OpenCV doesn’t preserve original RTSP PTS; you must manage your own list if you need machine-readable times.

(Recent OpenCV 4.x on Ubuntu works fine with RTSP/H.264 as long as FFmpeg is present. If the camera uses H.265 you either need a build of OpenCV with that codec enabled or go route #1. ￼ ￼ ￼)

⸻

Picking a time range during playback

Storage method	Fastest way to “seek”	Code sketch
Segment files (clip_YYYY-MM-DD_HH-MM-SS.mp4)	Parse filenames, pick the segment whose timestamp ≤ start < next segment.	pathlib.Path('clips').glob('clip_*') → sort
Embedded PTS metadata	Use ffmpeg -ss <time> -i file.mp4 -c copy -t <len> out.mp4 (no re-encode)	subprocess.run(["ffmpeg","-ss","2025-05-12T09:02:00","-i","clip.mp4","-c","copy","-t","30","slice.mp4"])
Burnt-in overlay	Rough manual seek, or OCR if really needed (not recommended)	–


⸻

Which should you choose?
	•	If you mainly archive and later clip out chunks: method #1 (FFmpeg, container timestamps).
You get pristine video, exact timing, and zero CPU load.
	•	If you’ll do real-time CV/AI work in Python and the visible clock is useful: method #2.

Either way, both paths are pure user-space – no kernel modules, so they work fine on stock Ubuntu.

Let me know if you’d like a small helper to crop out a specific time-range automatically, or if you want the FFmpeg command wrapped in ffmpeg-python instead of subprocess.