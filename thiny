Below is a ready-to-run helper (extract_range.py) that:
	1.	Scans a clips directory for files named
clip_YYYY-MM-DD_HH-MM-SS.mp4 (same pattern used in the FFmpeg-segment command).
	2.	Figures out which file(s) cover the time range you give.
	3.	Cuts the exact range with FFmpeg (no re-encode).
If the range spans two or more consecutive segments it stitches them together for you.

⸻


#!/usr/bin/env python3
"""
extract_range.py

Usage
=====
python extract_range.py \
    --clips-dir clips \
    --start  2025-05-12T09:02:00 \
    --end    2025-05-12T09:05:30 \
    --out    slice_09-02_to_09-05.mp4
"""
import argparse
import datetime as dt
import re
import subprocess
import sys
import tempfile
from pathlib import Path

FILE_RE = re.compile(r"clip_(\d{4}-\d{2}-\d{2})_(\d{2}-\d{2}-\d{2})\.mp4")

def parse_filename(path: Path) -> dt.datetime | None:
    m = FILE_RE.fullmatch(path.name)
    if not m:
        return None
    date_part, time_part = m.groups()
    return dt.datetime.fromisoformat(date_part + "T" + time_part.replace("-", ":"))

def seconds_between(a: dt.datetime, b: dt.datetime) -> float:
    return (b - a).total_seconds()

def ffprobe_duration(path: Path) -> float:
    """Return file duration in seconds (float) via ffprobe."""
    result = subprocess.run(
        ["ffprobe", "-v", "error", "-show_entries",
         "format=duration", "-of", "csv=p=0", str(path)],
        capture_output=True, text=True, check=True
    )
    return float(result.stdout.strip())

def clip_once(src: Path, start_offset_sec: float, duration_sec: float, dst: Path):
    subprocess.run(
        ["ffmpeg", "-y",
         "-ss", f"{start_offset_sec}", "-t", f"{duration_sec}",
         "-i", str(src),
         "-c", "copy", str(dst)],
        check=True
    )

def main(args):
    clips_dir = Path(args.clips_dir)
    start = dt.datetime.fromisoformat(args.start)
    end   = dt.datetime.fromisoformat(args.end)
    if end <= start:
        sys.exit("end time must be after start time")

    # 1. Load and sort clip files
    clips = []
    for p in clips_dir.glob("clip_*.mp4"):
        t = parse_filename(p)
        if t: clips.append((t, p))
    if not clips:
        sys.exit("No clip_*.mp4 files found")

    clips.sort()  # sort by start-time

    # 2. Build a list of segments overlapping our window
    segments = []
    for idx, (seg_start, path) in enumerate(clips):
        seg_end = clips[idx + 1][0] if idx + 1 < len(clips) else None
        if seg_end is None:          # last file – get real duration
            seg_len = ffprobe_duration(path)
            seg_end = seg_start + dt.timedelta(seconds=seg_len)

        if seg_end > start and seg_start < end:
            segments.append((seg_start, seg_end, path))

    if not segments:
        sys.exit("No clip covers the requested range")

    # 3. Extract
    with tempfile.TemporaryDirectory() as tmpd:
        tmpd = Path(tmpd)
        temp_parts = []

        for i, (seg_start, seg_end, path) in enumerate(segments):
            clip_from = max(start, seg_start)
            clip_to   = min(end,   seg_end)
            dur = seconds_between(clip_from, clip_to)
            off = seconds_between(seg_start, clip_from)

            part_file = tmpd / f"part_{i}.mp4"
            clip_once(path, off, dur, part_file)
            temp_parts.append(part_file)

        if len(temp_parts) == 1:
            temp_parts[0].rename(args.out)
        else:
            # Build FFmpeg concat list
            concat_txt = tmpd / "list.txt"
            concat_txt.write_text("".join(f"file '{p}'\n" for p in temp_parts))
            subprocess.run(
                ["ffmpeg", "-y",
                 "-f", "concat", "-safe", "0",
                 "-i", str(concat_txt),
                 "-c", "copy", args.out],
                check=True
            )

    print(f"✅  Saved clip to {args.out}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Extract an absolute time range from segmented RTSP clips"
    )
    parser.add_argument("--clips-dir", required=True,
                        help="Directory containing clip_YYYY-MM-DD_HH-MM-SS.mp4 files")
    parser.add_argument("--start", required=True,
                        help="Start timestamp (ISO, e.g. 2025-05-12T09:02:00)")
    parser.add_argument("--end", required=True,
                        help="End   timestamp (ISO)")
    parser.add_argument("--out",  required=True,
                        help="Output file (e.g. slice.mp4)")
    main(parser.parse_args())

How it works
	1.	Filename parsing – every segment’s UTC start time is decoded from its name.
	2.	Overlap test – any segment whose time range intersects [start, end] is chosen.
	3.	Precise cut – for each segment it calls FFmpeg with -ss after -i, giving frame-accurate clips without re-encoding.
	4.	Concatenation – if the span covers multiple segments, it concats them losslessly with FFmpeg’s concat demuxer.

One-liner run example

python extract_range.py \
  --clips-dir clips \
  --start  2025-05-12T09:02:00 \
  --end    2025-05-12T09:05:30 \
  --out    3½min_slice.mp4

You’ll get 3½min_slice.mp4 that plays exactly from 09:02:00 to 09:05:30.

⸻

Dependencies
	•	FFmpeg (same you used for recording)
	•	Python ≥ 3.9 (for datetime.fromisoformat with time part)

Let me know if you want extra features—e.g., local-time instead of UTC, or auto-detect clip duration to avoid ffprobe for the last segment.